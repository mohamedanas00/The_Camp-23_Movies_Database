1)Crate DataBase
=>CREATE DATABASE movies_database;

2)Create Table "thecamp_cinema":-
=>CREATE TABLE `movies_database`.`thecamp_cinema` (`Id` INT NOT NULL AUTO_INCREMENT , `movie_name` VARCHAR(50) NOT NULL , `movie_length` INT NOT NULL , `movie_director` VARCHAR(100) NOT NULL , PRIMARY KEY (`Id`)) ENGINE = InnoDB;

3)Create Table "thecamp_movies_ratings":-
=>CREATE TABLE `movies_database`.`thecamp_movies_ratings` (`Id` INT NOT NULL AUTO_INCREMENT , `movie_id` INT NOT NULL , `movie_review` VARCHAR(225) NOT NULL , `date` DATE NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`Id`), INDEX `movie_idFK` (`movie_id`)) ENGINE = InnoDB;
*{Make FOREIGNKey}:-
=>ALTER TABLE `thecamp_movies_ratings` ADD FOREIGN KEY (`movie_id`) REFERENCES `thecamp_cinema`(`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT;

4)Create Table "thecamp_movies_actors":-
=>CREATE TABLE `movies_database`.`thecamp_movies_actors` (`Id` INT NOT NULL AUTO_INCREMENT , `movie_id` INT NOT NULL , `actor_name` VARCHAR(60) NOT NULL , `actor_salary` BIGINT NOT NULL , PRIMARY KEY (`Id`), INDEX `movie_IdFK` (`movie_id`)) ENGINE = InnoDB;
*{Make FOREIGNKey}:-
=>ALTER TABLE `thecamp_movies_actors` ADD FOREIGN KEY (`movie_id`) REFERENCES `thecamp_cinema`(`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT;


5)return all movies recorded in the database with its reviews:-
=>SELECT `thecamp_cinema`.*, `thecamp_movies_ratings`.`movie_review`, `thecamp_movies_ratings`.`date`
FROM `thecamp_cinema` 
	LEFT JOIN `thecamp_movies_ratings` ON `thecamp_movies_ratings`.`movie_id` = `thecamp_cinema`.`Id`;
	
	
6)return all movies recorded in the database with its actors:-
=>SELECT `thecamp_cinema`.*, `thecamp_movies_actors`.`actor_name`, `thecamp_movies_actors`.`actor_salary`
FROM `thecamp_cinema` 
	LEFT JOIN `thecamp_movies_actors` ON `thecamp_movies_actors`.`movie_id` = `thecamp_cinema`.`Id`;	


7)return the total number of reviews for each movie in thecamp_movie_reviews table,
=>SELECT  `thecamp_cinema`.`Id` ,`thecamp_cinema`.`movie_name`,COUNT(`movie_review`) AS 'TOTAL_Review'
FROM `thecamp_movies_ratings` 
	LEFT JOIN `thecamp_cinema` ON `thecamp_movies_ratings`.`movie_id` = `thecamp_cinema`.`Id`
	GROUP BY `movie_id` ;
	
8)return the avg salay of an actor for each movie in thecamp_cinema table,
=>SELECT  `thecamp_cinema`.`Id` ,`thecamp_cinema`.`movie_name`,avg(`actor_salary`) AS 'avg_Review'
FROM `thecamp_movies_actors` 
	LEFT JOIN `thecamp_cinema` ON `thecamp_movies_actors`.`movie_id` = `thecamp_cinema`.`Id`
	GROUP BY `movie_id` ;